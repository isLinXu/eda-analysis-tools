import argparse
import os
import glob
import pandas as pd
from PIL import Image
from tqdm import tqdm


def yolo_to_csv(path, img_path):
    """Iterates through all .txt files (generated by YOLO) in a given directory and combines them in a single Pandas dataframe.

    Parameters:
    ----------
    path : {str}
        The path containing the .txt files
    img_path : {str}
        The path containing the corresponding images
    Returns
    -------
    Pandas DataFrame
        The produced dataframe
    """
    global txt_df, img_file
    classes_names = []
    txt_list = []
    txt_files = glob.glob(path + "/*.txt")
    for txt_file in tqdm(txt_files, desc="Processing .txt files"):
        file_name = os.path.splitext(os.path.basename(txt_file))[0] + '.jpg'

        img_file = os.path.join(img_path, file_name)

        if os.path.exists(img_file):
            img = Image.open(img_file)
            img_width, img_height = img.size
            with open(txt_file, 'r') as f:
                for line in f:
                    line = line.strip().split(' ')
                    class_name, x_center, y_center, width, height = line
                    class_name = int(class_name)
                    x_center, y_center, width, height = float(x_center), float(y_center), float(width), float(height)
                    xmin = int((x_center - width / 2) * img_width)
                    ymin = int((y_center - height / 2) * img_height)
                    xmax = int((x_center + width / 2) * img_width)
                    ymax = int((y_center + height / 2) * img_height)
                    classes_names.append(class_name)
                    value = (file_name, img_width, img_height, class_name, xmin, ymin, xmax, ymax)
                    print("value:", value)
                    txt_list.append(value)

    column_name = [
            "filename",
            "width",
            "height",
            "class",
            "xmin",
            "ymin",
            "xmax",
            "ymax",
    ]
    txt_df = pd.DataFrame(txt_list, columns=column_name)
    classes_names = list(set(classes_names))
    classes_names.sort()
    return txt_df, classes_names


def main():
    parser = argparse.ArgumentParser(description="Convert YOLO annotations to CSV format")
    parser.add_argument("-t", "--txtDir", help="Path to the directory containing YOLO .txt files", required=True)
    parser.add_argument("-i", "--imgDir", help="Path to the directory containing the corresponding images",
                        required=True)
    parser.add_argument("-o", "--outputFile", help="Path to the output CSV file", required=True)

    args = parser.parse_args()

    txtDir = args.txtDir
    imgDir = args.imgDir
    outputFile = args.outputFile

    # txtDir = "/Users/gatilin/PycharmProjects/eda-analysis-tools/data/yolo128/labels/train2017"
    # imgDir = "/Users/gatilin/PycharmProjects/eda-analysis-tools/data/yolo128/images/train2017"
    # outputFile = '/Users/gatilin/PycharmProjects/eda-analysis-tools/csv/yolo128.csv'

    yolo_df, yolo_classes = yolo_to_csv(txtDir, imgDir)
    yolo_df.to_csv(outputFile, index=False)


if __name__ == '__main__':
    main()
